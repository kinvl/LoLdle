//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background")
    /// Color `Correct`.
    static let correct = Rswift.ColorResource(bundle: R.hostingBundle, name: "Correct")
    /// Color `Incorrect`.
    static let incorrect = Rswift.ColorResource(bundle: R.hostingBundle, name: "Incorrect")
    /// Color `Partial`.
    static let partial = Rswift.ColorResource(bundle: R.hostingBundle, name: "Partial")
    /// Color `Text`.
    static let text = Rswift.ColorResource(bundle: R.hostingBundle, name: "Text")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Correct", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func correct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.correct, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Incorrect", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func incorrect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.incorrect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Partial", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func partial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.partial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Correct", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func correct(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.correct.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Incorrect", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func incorrect(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.incorrect.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Partial", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func partial(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.partial.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Beaufort-Bold.ttf`.
    static let beaufortBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Beaufort-Bold", pathExtension: "ttf")
    /// Resource file `Beaufort-Regular.ttf`.
    static let beaufortRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Beaufort-Regular", pathExtension: "ttf")
    /// Resource file `Fire.png`.
    static let firePng = Rswift.FileResource(bundle: R.hostingBundle, name: "Fire", pathExtension: "png")
    /// Resource file `Fragment.png`.
    static let fragmentPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Fragment", pathExtension: "png")
    /// Resource file `Smoke.png`.
    static let smokePng = Rswift.FileResource(bundle: R.hostingBundle, name: "Smoke", pathExtension: "png")
    /// Resource file `Sparkle.png`.
    static let sparklePng = Rswift.FileResource(bundle: R.hostingBundle, name: "Sparkle", pathExtension: "png")
    /// Resource file `congratulations.json`.
    static let congratulationsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "congratulations", pathExtension: "json")
    /// Resource file `error.json`.
    static let errorJson = Rswift.FileResource(bundle: R.hostingBundle, name: "error", pathExtension: "json")

    /// `bundle.url(forResource: "Beaufort-Bold", withExtension: "ttf")`
    static func beaufortBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.beaufortBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Beaufort-Regular", withExtension: "ttf")`
    static func beaufortRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.beaufortRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Fire", withExtension: "png")`
    static func firePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.firePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Fragment", withExtension: "png")`
    static func fragmentPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fragmentPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Smoke", withExtension: "png")`
    static func smokePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smokePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sparkle", withExtension: "png")`
    static func sparklePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sparklePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "congratulations", withExtension: "json")`
    static func congratulationsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.congratulationsJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "error", withExtension: "json")`
    static func errorJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.errorJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Beaufort-Bold`.
    static let beaufortBold = Rswift.FontResource(fontName: "Beaufort-Bold")
    /// Font `BeaufortW01-Regular`.
    static let beaufortW01Regular = Rswift.FontResource(fontName: "BeaufortW01-Regular")

    /// `UIFont(name: "Beaufort-Bold", size: ...)`
    static func beaufortBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: beaufortBold, size: size)
    }

    /// `UIFont(name: "BeaufortW01-Regular", size: ...)`
    static func beaufortW01Regular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: beaufortW01Regular, size: size)
    }

    static func validate() throws {
      if R.font.beaufortBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Beaufort-Bold' could not be loaded, is 'Beaufort-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.beaufortW01Regular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BeaufortW01-Regular' could not be loaded, is 'Beaufort-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `Fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fire")
    /// Image `Fragment`.
    static let fragment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fragment")
    /// Image `Smoke`.
    static let smoke = Rswift.ImageResource(bundle: R.hostingBundle, name: "Smoke")
    /// Image `Sparkle`.
    static let sparkle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sparkle")
    /// Image `answer_arrow`.
    static let answer_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "answer_arrow")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `league_button_background_disabled`.
    static let league_button_background_disabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "league_button_background_disabled")
    /// Image `league_button_background`.
    static let league_button_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "league_button_background")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Fragment", bundle: ..., traitCollection: ...)`
    static func fragment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fragment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Smoke", bundle: ..., traitCollection: ...)`
    static func smoke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smoke, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Sparkle", bundle: ..., traitCollection: ...)`
    static func sparkle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sparkle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "answer_arrow", bundle: ..., traitCollection: ...)`
    static func answer_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answer_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "league_button_background", bundle: ..., traitCollection: ...)`
    static func league_button_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.league_button_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "league_button_background_disabled", bundle: ..., traitCollection: ...)`
    static func league_button_background_disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.league_button_background_disabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 83 localization keys.
    struct localizable {
      /// en translation: A database access error has occurred. Try relaunching the app.
      ///
      /// Locales: en
      static let error_database_common = Rswift.StringResource(key: "error_database_common", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ability (coming soon)
      ///
      /// Locales: en
      static let challenge_button_ability_title = Rswift.StringResource(key: "challenge_button_ability_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: An error occurred while downloading the required files. Check your internet connection.
      ///
      /// Locales: en
      static let error_network_download = Rswift.StringResource(key: "error_network_download", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: An unknown error occured.
      ///
      /// Locales: en
      static let error_common_unknown = Rswift.StringResource(key: "error_common_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Answer
      ///
      /// Locales: en
      static let answer_button_title = Rswift.StringResource(key: "answer_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Aspect
      ///
      /// Locales: en
      static let champion_species_aspect = Rswift.StringResource(key: "champion_species_aspect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bandle City
      ///
      /// Locales: en
      static let champion_region_bandleCity = Rswift.StringResource(key: "champion_region_bandleCity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bilgewater
      ///
      /// Locales: en
      static let champion_region_bilgewater = Rswift.StringResource(key: "champion_region_bilgewater", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Blessed Isles
      ///
      /// Locales: en
      static let champion_region_blessedIsles = Rswift.StringResource(key: "champion_region_blessedIsles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bloodthirst
      ///
      /// Locales: en
      static let champion_resource_bloodthirst = Rswift.StringResource(key: "champion_resource_bloodthirst", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bottom
      ///
      /// Locales: en
      static let champion_position_bottom = Rswift.StringResource(key: "champion_position_bottom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Brackern
      ///
      /// Locales: en
      static let champion_species_brackern = Rswift.StringResource(key: "champion_species_brackern", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camavor
      ///
      /// Locales: en
      static let champion_region_camavor = Rswift.StringResource(key: "champion_region_camavor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cat
      ///
      /// Locales: en
      static let champion_species_cat = Rswift.StringResource(key: "champion_species_cat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Celestial
      ///
      /// Locales: en
      static let champion_species_celestial = Rswift.StringResource(key: "champion_species_celestial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Champion
      ///
      /// Locales: en
      static let challenge_button_champion_title = Rswift.StringResource(key: "challenge_button_champion_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Champion name
      ///
      /// Locales: en
      static let answer_textfield_placeholder = Rswift.StringResource(key: "answer_textfield_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chemically Altered
      ///
      /// Locales: en
      static let champion_species_chemicallyAltered = Rswift.StringResource(key: "champion_species_chemicallyAltered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Congratulations!
      ///
      /// Locales: en
      static let winner_congratulations = Rswift.StringResource(key: "winner_congratulations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Courage
      ///
      /// Locales: en
      static let champion_resource_courage = Rswift.StringResource(key: "champion_resource_courage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cyborg
      ///
      /// Locales: en
      static let champion_species_cyborg = Rswift.StringResource(key: "champion_species_cyborg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Darkin
      ///
      /// Locales: en
      static let champion_species_darkin = Rswift.StringResource(key: "champion_species_darkin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Demacia
      ///
      /// Locales: en
      static let champion_region_demacia = Rswift.StringResource(key: "champion_region_demacia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Demon
      ///
      /// Locales: en
      static let champion_species_demon = Rswift.StringResource(key: "champion_species_demon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dragon
      ///
      /// Locales: en
      static let champion_species_dragon = Rswift.StringResource(key: "champion_species_dragon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Energy
      ///
      /// Locales: en
      static let champion_resource_energy = Rswift.StringResource(key: "champion_resource_energy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en
      static let champion_gender_female = Rswift.StringResource(key: "champion_gender_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ferocity
      ///
      /// Locales: en
      static let champion_resource_ferocity = Rswift.StringResource(key: "champion_resource_ferocity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Flow
      ///
      /// Locales: en
      static let champion_resource_flow = Rswift.StringResource(key: "champion_resource_flow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Freljord
      ///
      /// Locales: en
      static let champion_region_freljord = Rswift.StringResource(key: "champion_region_freljord", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fury
      ///
      /// Locales: en
      static let champion_resource_fury = Rswift.StringResource(key: "champion_resource_fury", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: God
      ///
      /// Locales: en
      static let champion_species_god = Rswift.StringResource(key: "champion_species_god", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: God-Warrior
      ///
      /// Locales: en
      static let champion_species_godWarrior = Rswift.StringResource(key: "champion_species_godWarrior", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Golem
      ///
      /// Locales: en
      static let champion_species_golem = Rswift.StringResource(key: "champion_species_golem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Grit
      ///
      /// Locales: en
      static let champion_resource_grit = Rswift.StringResource(key: "champion_resource_grit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Health
      ///
      /// Locales: en
      static let champion_resource_health = Rswift.StringResource(key: "champion_resource_health", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Heat
      ///
      /// Locales: en
      static let champion_resource_heat = Rswift.StringResource(key: "champion_resource_heat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Human
      ///
      /// Locales: en
      static let champion_species_human = Rswift.StringResource(key: "champion_species_human", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Icathia
      ///
      /// Locales: en
      static let champion_region_icathia = Rswift.StringResource(key: "champion_region_icathia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Iceborn
      ///
      /// Locales: en
      static let champion_species_iceborn = Rswift.StringResource(key: "champion_species_iceborn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ionia
      ///
      /// Locales: en
      static let champion_region_ionia = Rswift.StringResource(key: "champion_region_ionia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ixtal
      ///
      /// Locales: en
      static let champion_region_ixtal = Rswift.StringResource(key: "champion_region_ixtal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Jungle
      ///
      /// Locales: en
      static let champion_position_jungle = Rswift.StringResource(key: "champion_position_jungle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Kathkan
      ///
      /// Locales: en
      static let champion_region_kathkan = Rswift.StringResource(key: "champion_region_kathkan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Magically Altered
      ///
      /// Locales: en
      static let champion_species_magicallyAltered = Rswift.StringResource(key: "champion_species_magicallyAltered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Magicborn
      ///
      /// Locales: en
      static let champion_species_magicborn = Rswift.StringResource(key: "champion_species_magicborn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en
      static let champion_gender_male = Rswift.StringResource(key: "champion_gender_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mana
      ///
      /// Locales: en
      static let champion_resource_mana = Rswift.StringResource(key: "champion_resource_mana", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Manaless
      ///
      /// Locales: en
      static let champion_resource_manaless = Rswift.StringResource(key: "champion_resource_manaless", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Melee
      ///
      /// Locales: en
      static let champion_rangeType_melee = Rswift.StringResource(key: "champion_rangeType_melee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Middle
      ///
      /// Locales: en
      static let champion_position_middle = Rswift.StringResource(key: "champion_position_middle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Minotaur
      ///
      /// Locales: en
      static let champion_species_minotaur = Rswift.StringResource(key: "champion_species_minotaur", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Noxus
      ///
      /// Locales: en
      static let champion_region_noxus = Rswift.StringResource(key: "champion_region_noxus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en
      static let champion_gender_other = Rswift.StringResource(key: "champion_gender_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Piltover
      ///
      /// Locales: en
      static let champion_region_piltover = Rswift.StringResource(key: "champion_region_piltover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Quote (coming soon)
      ///
      /// Locales: en
      static let challenge_button_quote_title = Rswift.StringResource(key: "challenge_button_quote_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rage
      ///
      /// Locales: en
      static let champion_resource_rage = Rswift.StringResource(key: "champion_resource_rage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ranged
      ///
      /// Locales: en
      static let champion_rangeType_ranged = Rswift.StringResource(key: "champion_rangeType_ranged", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rat
      ///
      /// Locales: en
      static let champion_species_rat = Rswift.StringResource(key: "champion_species_rat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Revenant
      ///
      /// Locales: en
      static let champion_species_revenant = Rswift.StringResource(key: "champion_species_revenant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rhaast
      ///
      /// Locales: en
      static let champion_region_rhaast = Rswift.StringResource(key: "champion_region_rhaast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Runeterra
      ///
      /// Locales: en
      static let champion_region_runeterra = Rswift.StringResource(key: "champion_region_runeterra", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shadow Isles
      ///
      /// Locales: en
      static let champion_region_shadowIsles = Rswift.StringResource(key: "champion_region_shadowIsles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shield
      ///
      /// Locales: en
      static let champion_resource_shield = Rswift.StringResource(key: "champion_resource_shield", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shurima
      ///
      /// Locales: en
      static let champion_region_shurima = Rswift.StringResource(key: "champion_region_shurima", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Spirit
      ///
      /// Locales: en
      static let champion_species_spirit = Rswift.StringResource(key: "champion_species_spirit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Spiritualist
      ///
      /// Locales: en
      static let champion_species_spiritualist = Rswift.StringResource(key: "champion_species_spiritualist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Splash (coming soon)
      ///
      /// Locales: en
      static let challenge_button_splash_title = Rswift.StringResource(key: "challenge_button_splash_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Support
      ///
      /// Locales: en
      static let champion_position_support = Rswift.StringResource(key: "champion_position_support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Targon
      ///
      /// Locales: en
      static let champion_region_targon = Rswift.StringResource(key: "champion_region_targon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The Void
      ///
      /// Locales: en
      static let champion_region_void = Rswift.StringResource(key: "champion_region_void", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Top
      ///
      /// Locales: en
      static let champion_position_top = Rswift.StringResource(key: "champion_position_top", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Troll
      ///
      /// Locales: en
      static let champion_species_troll = Rswift.StringResource(key: "champion_species_troll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unable to make a network request. Check your internet connection.
      ///
      /// Locales: en
      static let error_network_common = Rswift.StringResource(key: "error_network_common", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unable to read files from a drive. Try relaunching the app.
      ///
      /// Locales: en
      static let error_files_common = Rswift.StringResource(key: "error_files_common", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Undead
      ///
      /// Locales: en
      static let champion_species_undead = Rswift.StringResource(key: "champion_species_undead", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en
      static let champion_species_unknown = Rswift.StringResource(key: "champion_species_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vastayan
      ///
      /// Locales: en
      static let champion_species_vastayan = Rswift.StringResource(key: "champion_species_vastayan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Voidborn
      ///
      /// Locales: en
      static let champion_species_voidBeing = Rswift.StringResource(key: "champion_species_voidBeing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yordle
      ///
      /// Locales: en
      static let champion_species_yordle = Rswift.StringResource(key: "champion_species_yordle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You guessed the correct champion in %@ tries! 🏆
      ///
      /// Locales: en
      static let winner_number_of_guesses = Rswift.StringResource(key: "winner_number_of_guesses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You guessed the correct champion on the first try! 🏆
      ///
      /// Locales: en
      static let winner_first_try = Rswift.StringResource(key: "winner_first_try", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Zaun
      ///
      /// Locales: en
      static let champion_region_zaun = Rswift.StringResource(key: "champion_region_zaun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: A database access error has occurred. Try relaunching the app.
      ///
      /// Locales: en
      static func error_database_common(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_database_common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_database_common"
        }

        return NSLocalizedString("error_database_common", bundle: bundle, comment: "")
      }

      /// en translation: Ability (coming soon)
      ///
      /// Locales: en
      static func challenge_button_ability_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("challenge_button_ability_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "challenge_button_ability_title"
        }

        return NSLocalizedString("challenge_button_ability_title", bundle: bundle, comment: "")
      }

      /// en translation: An error occurred while downloading the required files. Check your internet connection.
      ///
      /// Locales: en
      static func error_network_download(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_network_download", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_network_download"
        }

        return NSLocalizedString("error_network_download", bundle: bundle, comment: "")
      }

      /// en translation: An unknown error occured.
      ///
      /// Locales: en
      static func error_common_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_common_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_common_unknown"
        }

        return NSLocalizedString("error_common_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Answer
      ///
      /// Locales: en
      static func answer_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("answer_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "answer_button_title"
        }

        return NSLocalizedString("answer_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Aspect
      ///
      /// Locales: en
      static func champion_species_aspect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_aspect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_aspect"
        }

        return NSLocalizedString("champion_species_aspect", bundle: bundle, comment: "")
      }

      /// en translation: Bandle City
      ///
      /// Locales: en
      static func champion_region_bandleCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_bandleCity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_bandleCity"
        }

        return NSLocalizedString("champion_region_bandleCity", bundle: bundle, comment: "")
      }

      /// en translation: Bilgewater
      ///
      /// Locales: en
      static func champion_region_bilgewater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_bilgewater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_bilgewater"
        }

        return NSLocalizedString("champion_region_bilgewater", bundle: bundle, comment: "")
      }

      /// en translation: Blessed Isles
      ///
      /// Locales: en
      static func champion_region_blessedIsles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_blessedIsles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_blessedIsles"
        }

        return NSLocalizedString("champion_region_blessedIsles", bundle: bundle, comment: "")
      }

      /// en translation: Bloodthirst
      ///
      /// Locales: en
      static func champion_resource_bloodthirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_bloodthirst", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_bloodthirst"
        }

        return NSLocalizedString("champion_resource_bloodthirst", bundle: bundle, comment: "")
      }

      /// en translation: Bottom
      ///
      /// Locales: en
      static func champion_position_bottom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_position_bottom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_position_bottom"
        }

        return NSLocalizedString("champion_position_bottom", bundle: bundle, comment: "")
      }

      /// en translation: Brackern
      ///
      /// Locales: en
      static func champion_species_brackern(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_brackern", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_brackern"
        }

        return NSLocalizedString("champion_species_brackern", bundle: bundle, comment: "")
      }

      /// en translation: Camavor
      ///
      /// Locales: en
      static func champion_region_camavor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_camavor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_camavor"
        }

        return NSLocalizedString("champion_region_camavor", bundle: bundle, comment: "")
      }

      /// en translation: Cat
      ///
      /// Locales: en
      static func champion_species_cat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_cat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_cat"
        }

        return NSLocalizedString("champion_species_cat", bundle: bundle, comment: "")
      }

      /// en translation: Celestial
      ///
      /// Locales: en
      static func champion_species_celestial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_celestial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_celestial"
        }

        return NSLocalizedString("champion_species_celestial", bundle: bundle, comment: "")
      }

      /// en translation: Champion
      ///
      /// Locales: en
      static func challenge_button_champion_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("challenge_button_champion_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "challenge_button_champion_title"
        }

        return NSLocalizedString("challenge_button_champion_title", bundle: bundle, comment: "")
      }

      /// en translation: Champion name
      ///
      /// Locales: en
      static func answer_textfield_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("answer_textfield_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "answer_textfield_placeholder"
        }

        return NSLocalizedString("answer_textfield_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Chemically Altered
      ///
      /// Locales: en
      static func champion_species_chemicallyAltered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_chemicallyAltered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_chemicallyAltered"
        }

        return NSLocalizedString("champion_species_chemicallyAltered", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations!
      ///
      /// Locales: en
      static func winner_congratulations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("winner_congratulations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "winner_congratulations"
        }

        return NSLocalizedString("winner_congratulations", bundle: bundle, comment: "")
      }

      /// en translation: Courage
      ///
      /// Locales: en
      static func champion_resource_courage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_courage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_courage"
        }

        return NSLocalizedString("champion_resource_courage", bundle: bundle, comment: "")
      }

      /// en translation: Cyborg
      ///
      /// Locales: en
      static func champion_species_cyborg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_cyborg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_cyborg"
        }

        return NSLocalizedString("champion_species_cyborg", bundle: bundle, comment: "")
      }

      /// en translation: Darkin
      ///
      /// Locales: en
      static func champion_species_darkin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_darkin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_darkin"
        }

        return NSLocalizedString("champion_species_darkin", bundle: bundle, comment: "")
      }

      /// en translation: Demacia
      ///
      /// Locales: en
      static func champion_region_demacia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_demacia", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_demacia"
        }

        return NSLocalizedString("champion_region_demacia", bundle: bundle, comment: "")
      }

      /// en translation: Demon
      ///
      /// Locales: en
      static func champion_species_demon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_demon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_demon"
        }

        return NSLocalizedString("champion_species_demon", bundle: bundle, comment: "")
      }

      /// en translation: Dragon
      ///
      /// Locales: en
      static func champion_species_dragon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_dragon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_dragon"
        }

        return NSLocalizedString("champion_species_dragon", bundle: bundle, comment: "")
      }

      /// en translation: Energy
      ///
      /// Locales: en
      static func champion_resource_energy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_energy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_energy"
        }

        return NSLocalizedString("champion_resource_energy", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en
      static func champion_gender_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_gender_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_gender_female"
        }

        return NSLocalizedString("champion_gender_female", bundle: bundle, comment: "")
      }

      /// en translation: Ferocity
      ///
      /// Locales: en
      static func champion_resource_ferocity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_ferocity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_ferocity"
        }

        return NSLocalizedString("champion_resource_ferocity", bundle: bundle, comment: "")
      }

      /// en translation: Flow
      ///
      /// Locales: en
      static func champion_resource_flow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_flow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_flow"
        }

        return NSLocalizedString("champion_resource_flow", bundle: bundle, comment: "")
      }

      /// en translation: Freljord
      ///
      /// Locales: en
      static func champion_region_freljord(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_freljord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_freljord"
        }

        return NSLocalizedString("champion_region_freljord", bundle: bundle, comment: "")
      }

      /// en translation: Fury
      ///
      /// Locales: en
      static func champion_resource_fury(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_fury", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_fury"
        }

        return NSLocalizedString("champion_resource_fury", bundle: bundle, comment: "")
      }

      /// en translation: God
      ///
      /// Locales: en
      static func champion_species_god(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_god", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_god"
        }

        return NSLocalizedString("champion_species_god", bundle: bundle, comment: "")
      }

      /// en translation: God-Warrior
      ///
      /// Locales: en
      static func champion_species_godWarrior(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_godWarrior", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_godWarrior"
        }

        return NSLocalizedString("champion_species_godWarrior", bundle: bundle, comment: "")
      }

      /// en translation: Golem
      ///
      /// Locales: en
      static func champion_species_golem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_golem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_golem"
        }

        return NSLocalizedString("champion_species_golem", bundle: bundle, comment: "")
      }

      /// en translation: Grit
      ///
      /// Locales: en
      static func champion_resource_grit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_grit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_grit"
        }

        return NSLocalizedString("champion_resource_grit", bundle: bundle, comment: "")
      }

      /// en translation: Health
      ///
      /// Locales: en
      static func champion_resource_health(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_health", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_health"
        }

        return NSLocalizedString("champion_resource_health", bundle: bundle, comment: "")
      }

      /// en translation: Heat
      ///
      /// Locales: en
      static func champion_resource_heat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_heat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_heat"
        }

        return NSLocalizedString("champion_resource_heat", bundle: bundle, comment: "")
      }

      /// en translation: Human
      ///
      /// Locales: en
      static func champion_species_human(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_human", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_human"
        }

        return NSLocalizedString("champion_species_human", bundle: bundle, comment: "")
      }

      /// en translation: Icathia
      ///
      /// Locales: en
      static func champion_region_icathia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_icathia", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_icathia"
        }

        return NSLocalizedString("champion_region_icathia", bundle: bundle, comment: "")
      }

      /// en translation: Iceborn
      ///
      /// Locales: en
      static func champion_species_iceborn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_iceborn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_iceborn"
        }

        return NSLocalizedString("champion_species_iceborn", bundle: bundle, comment: "")
      }

      /// en translation: Ionia
      ///
      /// Locales: en
      static func champion_region_ionia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_ionia", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_ionia"
        }

        return NSLocalizedString("champion_region_ionia", bundle: bundle, comment: "")
      }

      /// en translation: Ixtal
      ///
      /// Locales: en
      static func champion_region_ixtal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_ixtal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_ixtal"
        }

        return NSLocalizedString("champion_region_ixtal", bundle: bundle, comment: "")
      }

      /// en translation: Jungle
      ///
      /// Locales: en
      static func champion_position_jungle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_position_jungle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_position_jungle"
        }

        return NSLocalizedString("champion_position_jungle", bundle: bundle, comment: "")
      }

      /// en translation: Kathkan
      ///
      /// Locales: en
      static func champion_region_kathkan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_kathkan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_kathkan"
        }

        return NSLocalizedString("champion_region_kathkan", bundle: bundle, comment: "")
      }

      /// en translation: Magically Altered
      ///
      /// Locales: en
      static func champion_species_magicallyAltered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_magicallyAltered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_magicallyAltered"
        }

        return NSLocalizedString("champion_species_magicallyAltered", bundle: bundle, comment: "")
      }

      /// en translation: Magicborn
      ///
      /// Locales: en
      static func champion_species_magicborn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_magicborn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_magicborn"
        }

        return NSLocalizedString("champion_species_magicborn", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en
      static func champion_gender_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_gender_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_gender_male"
        }

        return NSLocalizedString("champion_gender_male", bundle: bundle, comment: "")
      }

      /// en translation: Mana
      ///
      /// Locales: en
      static func champion_resource_mana(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_mana", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_mana"
        }

        return NSLocalizedString("champion_resource_mana", bundle: bundle, comment: "")
      }

      /// en translation: Manaless
      ///
      /// Locales: en
      static func champion_resource_manaless(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_manaless", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_manaless"
        }

        return NSLocalizedString("champion_resource_manaless", bundle: bundle, comment: "")
      }

      /// en translation: Melee
      ///
      /// Locales: en
      static func champion_rangeType_melee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_rangeType_melee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_rangeType_melee"
        }

        return NSLocalizedString("champion_rangeType_melee", bundle: bundle, comment: "")
      }

      /// en translation: Middle
      ///
      /// Locales: en
      static func champion_position_middle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_position_middle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_position_middle"
        }

        return NSLocalizedString("champion_position_middle", bundle: bundle, comment: "")
      }

      /// en translation: Minotaur
      ///
      /// Locales: en
      static func champion_species_minotaur(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_minotaur", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_minotaur"
        }

        return NSLocalizedString("champion_species_minotaur", bundle: bundle, comment: "")
      }

      /// en translation: Noxus
      ///
      /// Locales: en
      static func champion_region_noxus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_noxus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_noxus"
        }

        return NSLocalizedString("champion_region_noxus", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en
      static func champion_gender_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_gender_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_gender_other"
        }

        return NSLocalizedString("champion_gender_other", bundle: bundle, comment: "")
      }

      /// en translation: Piltover
      ///
      /// Locales: en
      static func champion_region_piltover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_piltover", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_piltover"
        }

        return NSLocalizedString("champion_region_piltover", bundle: bundle, comment: "")
      }

      /// en translation: Quote (coming soon)
      ///
      /// Locales: en
      static func challenge_button_quote_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("challenge_button_quote_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "challenge_button_quote_title"
        }

        return NSLocalizedString("challenge_button_quote_title", bundle: bundle, comment: "")
      }

      /// en translation: Rage
      ///
      /// Locales: en
      static func champion_resource_rage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_rage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_rage"
        }

        return NSLocalizedString("champion_resource_rage", bundle: bundle, comment: "")
      }

      /// en translation: Ranged
      ///
      /// Locales: en
      static func champion_rangeType_ranged(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_rangeType_ranged", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_rangeType_ranged"
        }

        return NSLocalizedString("champion_rangeType_ranged", bundle: bundle, comment: "")
      }

      /// en translation: Rat
      ///
      /// Locales: en
      static func champion_species_rat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_rat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_rat"
        }

        return NSLocalizedString("champion_species_rat", bundle: bundle, comment: "")
      }

      /// en translation: Revenant
      ///
      /// Locales: en
      static func champion_species_revenant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_revenant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_revenant"
        }

        return NSLocalizedString("champion_species_revenant", bundle: bundle, comment: "")
      }

      /// en translation: Rhaast
      ///
      /// Locales: en
      static func champion_region_rhaast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_rhaast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_rhaast"
        }

        return NSLocalizedString("champion_region_rhaast", bundle: bundle, comment: "")
      }

      /// en translation: Runeterra
      ///
      /// Locales: en
      static func champion_region_runeterra(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_runeterra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_runeterra"
        }

        return NSLocalizedString("champion_region_runeterra", bundle: bundle, comment: "")
      }

      /// en translation: Shadow Isles
      ///
      /// Locales: en
      static func champion_region_shadowIsles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_shadowIsles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_shadowIsles"
        }

        return NSLocalizedString("champion_region_shadowIsles", bundle: bundle, comment: "")
      }

      /// en translation: Shield
      ///
      /// Locales: en
      static func champion_resource_shield(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_resource_shield", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_resource_shield"
        }

        return NSLocalizedString("champion_resource_shield", bundle: bundle, comment: "")
      }

      /// en translation: Shurima
      ///
      /// Locales: en
      static func champion_region_shurima(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_shurima", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_shurima"
        }

        return NSLocalizedString("champion_region_shurima", bundle: bundle, comment: "")
      }

      /// en translation: Spirit
      ///
      /// Locales: en
      static func champion_species_spirit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_spirit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_spirit"
        }

        return NSLocalizedString("champion_species_spirit", bundle: bundle, comment: "")
      }

      /// en translation: Spiritualist
      ///
      /// Locales: en
      static func champion_species_spiritualist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_spiritualist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_spiritualist"
        }

        return NSLocalizedString("champion_species_spiritualist", bundle: bundle, comment: "")
      }

      /// en translation: Splash (coming soon)
      ///
      /// Locales: en
      static func challenge_button_splash_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("challenge_button_splash_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "challenge_button_splash_title"
        }

        return NSLocalizedString("challenge_button_splash_title", bundle: bundle, comment: "")
      }

      /// en translation: Support
      ///
      /// Locales: en
      static func champion_position_support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_position_support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_position_support"
        }

        return NSLocalizedString("champion_position_support", bundle: bundle, comment: "")
      }

      /// en translation: Targon
      ///
      /// Locales: en
      static func champion_region_targon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_targon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_targon"
        }

        return NSLocalizedString("champion_region_targon", bundle: bundle, comment: "")
      }

      /// en translation: The Void
      ///
      /// Locales: en
      static func champion_region_void(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_void", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_void"
        }

        return NSLocalizedString("champion_region_void", bundle: bundle, comment: "")
      }

      /// en translation: Top
      ///
      /// Locales: en
      static func champion_position_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_position_top", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_position_top"
        }

        return NSLocalizedString("champion_position_top", bundle: bundle, comment: "")
      }

      /// en translation: Troll
      ///
      /// Locales: en
      static func champion_species_troll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_troll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_troll"
        }

        return NSLocalizedString("champion_species_troll", bundle: bundle, comment: "")
      }

      /// en translation: Unable to make a network request. Check your internet connection.
      ///
      /// Locales: en
      static func error_network_common(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_network_common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_network_common"
        }

        return NSLocalizedString("error_network_common", bundle: bundle, comment: "")
      }

      /// en translation: Unable to read files from a drive. Try relaunching the app.
      ///
      /// Locales: en
      static func error_files_common(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_files_common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_files_common"
        }

        return NSLocalizedString("error_files_common", bundle: bundle, comment: "")
      }

      /// en translation: Undead
      ///
      /// Locales: en
      static func champion_species_undead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_undead", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_undead"
        }

        return NSLocalizedString("champion_species_undead", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en
      static func champion_species_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_unknown"
        }

        return NSLocalizedString("champion_species_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Vastayan
      ///
      /// Locales: en
      static func champion_species_vastayan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_vastayan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_vastayan"
        }

        return NSLocalizedString("champion_species_vastayan", bundle: bundle, comment: "")
      }

      /// en translation: Voidborn
      ///
      /// Locales: en
      static func champion_species_voidBeing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_voidBeing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_voidBeing"
        }

        return NSLocalizedString("champion_species_voidBeing", bundle: bundle, comment: "")
      }

      /// en translation: Yordle
      ///
      /// Locales: en
      static func champion_species_yordle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_species_yordle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_species_yordle"
        }

        return NSLocalizedString("champion_species_yordle", bundle: bundle, comment: "")
      }

      /// en translation: You guessed the correct champion in %@ tries! 🏆
      ///
      /// Locales: en
      static func winner_number_of_guesses(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("winner_number_of_guesses", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "winner_number_of_guesses"
        }

        let format = NSLocalizedString("winner_number_of_guesses", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You guessed the correct champion on the first try! 🏆
      ///
      /// Locales: en
      static func winner_first_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("winner_first_try", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "winner_first_try"
        }

        return NSLocalizedString("winner_first_try", bundle: bundle, comment: "")
      }

      /// en translation: Zaun
      ///
      /// Locales: en
      static func champion_region_zaun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("champion_region_zaun", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "champion_region_zaun"
        }

        return NSLocalizedString("champion_region_zaun", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
